<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="../../clonk.xsl"?>
<clonkDoc xmlns="https://clonkspot.org"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="https://clonkspot.org ../../clonk.xsd" xml:lang="de">
<doc>
<title>Szenarioscripte</title>

<h id="SzenarioScripte">Szenarioscripte</h>
<part>
	<text>In Szenarioscripten kann ein globaler Handlungsablauf und szenarienspezifische Besonderheiten wie Rejoins oder spezielle Spielerplatzierungen festgelegt werden. Für eine Beschreibung der Scriptsprache C4Script siehe <emLink href="script/index.html">C4Script</emLink>-Dokumentation.</text>

	<h id="Callbacks">Callbacks in Szenarioscripten</h>
	<text>Beim Start der Runde (Und VOR dem Beitritt der Spieler!) ruft die Engine, wenn vorhanden, die Funktion "Initialize" im Script des Szenarios auf. Innerhalb dieser Funktion können z.B. Objekte erzeugt werden, die beim Start der Runde vorhanden sein sollen. Außerdem kann die fortlaufende Scriptausführung gestartet werden.</text>

	<code>func Initialize()
{
  <funcLink>Message</funcLink>("Hallo");
  <funcLink>CreateObject</funcLink>(HUT1,250,200,0);
  <funcLink>ScriptGo</funcLink>(1);
}</code>

	<text>Fortlaufende Scriptausführung: zu Beginn der Runde steht der interne Sciptzähler auf 0. Wurde mit ScriptGo die Scriptausführung aktiviert, so erhöht die Engine im Lauf der Runde in jedem zehnten Frame (Bild) den Scriptzähler um 1 und ruft, wenn vorhanden, die dazugehörige Script-Funktion im Szenario-Script auf.</text>
	
	<code>func Script26()
{
  <funcLink>Message</funcLink>("Diese Funktion wird nach 260 Frames ausgeführt.");
}</code>

	<text>Der Scriptzähler kann mit dem Befehl <funcLink>goto</funcLink>() auch manuell auf einen bestimmten Wert gesetzt werden.</text>
	<text>Nach der Platzierung eines beitretenden Spielers ruft die Engine, wenn vorhanden, die Funktion InitializePlayer im Scenario-Script für diesen Spieler auf. Die Funktion wird aufgerufen, nachdem die in Scenario.txt beschriebenen Startkonditionen (Positionierung und Platzierung von Mannschaft, Gebäude, Fahrzeuge, Material) verarbeitet wurden. Mit dieser Funktion können weitere spielerabhängige Startkonditionen geschaffen werden.</text>

	<code>func InitializePlayer(iPlr)
{
  // Eine Meldung für diesen Spieler
  <funcLink>Message</funcLink>( "Spieler Nr. %d ist beigetreten", 0, iPlr );
  <funcLink>Sound</funcLink>("Ding");
  // Ersten Clonk des Spielers doch an einer anderen Stelle starten lassen
  <funcLink>SetPosition</funcLink>( <funcLink>Random</funcLink>(<funcLink>LandscapeWidth</funcLink>()), <funcLink>Random</funcLink>(<funcLink>LandscapeHeight</funcLink>()), <funcLink>GetCrew</funcLink>(iPlr));
}</code>

	<text>Analog dazu ruft die Engine die Funktion RemovePlayer auf, wenn ein Spieler die Runde verlässt.</text>
	<text>Wird eine Runde durch szenariobedingte Spielziele wie Spielereliminierung, Materialabbau, usw. (siehe Scenario.txt <emLink href="scenario/scenario.html#SektionGame">Sektion [Game]</emLink>) oder durch den Scriptbefehl GameOver beendet (also nicht bei abgebrochenen Runden), ruft die Engine im Szenario-Script die Funktion OnGameOver auf.</text>

	<code>func OnGameOver()
{
  <funcLink>Sound</funcLink>("Trumpet");
  // Hier bietet sich die Möglichkeit für spezielle Rundenauswertung in der Log-Datei Clonk4.log
  <funcLink>Log</funcLink>("Vermögen von Spieler 1: %d", <funcLink>GetWealth</funcLink>(0));
}</code>
</part>

</doc><author>Sven2</author><date>2002-04</date>

</clonkDoc>
