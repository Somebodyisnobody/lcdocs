<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="../../clonk.xsl"?>
<clonkDoc xmlns="https://clonkspot.org"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="https://clonkspot.org ../../clonk.xsd" xml:lang="de">
<doc>
<title>Script</title>

<h id="C4ScriptDokumentation">Script</h>
<part>
<h id="Scripte">Einleitung</h>
<text>Die Scriptsprache von Clonk heißt C4Script.</text>
<text>Objekte und Szenarien von Clonk können ein Script enthalten. Funktionsaufrufe aus
Szenarioscripten gelten als globale Aufrufe. Funktionsaufrufe aus Objektscripten gelten als lokale
Aufrufe.</text>
<text>Für weitere Informationen zu den spezifischen Scriptarten siehe 
<emLink href="definition/script.html">Objektscripte</emLink> und
<emLink href="scenario/script.html">Szenarioscripte</emLink>.</text>

<text>C4Script verwendet C-ähnliche Syntax. Es gibt
<emLink href="script/operatoren.html">Operatoren</emLink>,
<emLink href="script/NamedVar.html">Variablendeklaration</emLink>, Compound Statements (Blöcke),
Bedingungen (<funcLink>if</funcLink>) und Wiederholungsschleifen (<funcLink>for</funcLink> und
<funcLink>while</funcLink>).</text>

<h id="Debugging">Debugging</h>
<text>Fehlermeldungen lassen sich durch Aktivieren des Debugmodus in den Optionen des Menüsystems
anzeigen. Jeder Script-Programmierer sollte den Debugmodus aktivieren.</text>

<h id="Funktionen">Funktionen</h>
<text>Ähnlich wie in anderen Sprachen können in C4Script 
<emLink href="script/Funcs.html">Funktionen</emLink> deklariert werden:</text>
<code>func CreateRock()
{
  [Erzeugt einen Stein|Image=ROCK]
  <funcLink>CreateObject</funcLink>(ROCK,50,50);
  <funcLink>return</funcLink>(1);
}
</code>
<text>Unmittelbar nach dem Funktionsnamen kann in eckigen Klammern eine Beschreibung der Funktion
folgen, die in mehreren durch | getrennten Feldern einen kurzen Beschreibungstext und eine
Bildreferenz (id der Definition, deren Bild verwendet werden soll) enthalten kann.</text>

<h id="VariablenParameter">Variablen/Parameter</h>
<text>Variablen können Werte der Typen int, bool, id, string oder object enthalten. Für alle in
Funktionsaufrufen ausgelassenen Parameter gilt grundsätzlich der Vorgabewert Null. Funktionen
akzeptieren maximal zehn Parameter.</text>
<h id="Kommentare">Kommentare</h>
<text>Scripte können Kommentare im C-Stil enthalten. Kommentare werden beim Laden des Script
herausgefiltert und komplett ignoriert.</text>
<code>func MeineFunktion() // Ein Kommentar bis zum Ende der Zeile
{
  <funcLink>Message</funcLink>(&quot;Dieser Code wird ausgeführt&quot;); /* Ein Kommentar in einem Block */ <funcLink>Message</funcLink>(&quot;Dieser auch&quot;);
  <funcLink>return</funcLink>(1);
}
</code>

<h id="Infos">Weitere Informationen</h>
<text><emLink href="script/AppendTo.html">#appendto: Zum nachträglichen Erweitern fremder Scripte</emLink></text>
<text><emLink href="script/Strict.html">#strict: Der neue Standard</emLink></text>
<text><emLink href="script/BreakContinue.html">Befehle zur Schleifenkontrolle</emLink></text>
<text><emLink href="script/FuncCall.html">Aufruf von Scriptfunktionen</emLink></text>
<text><emLink href="script/Effects.html">Effekte</emLink></text>
<text><emLink href="script/GetXXVal.html">Abfrage von Spieldaten</emLink></text>
<text><emLink href="script/NamedVar.html">Benannte Variablen und ihre Geltungsbereiche</emLink></text>
<text><emLink href="script/operatoren.html">Operatoren: +, -, = etc. in C4Script</emLink></text>
<text><emLink href="script/Typechecks.html">Überprüfung von Datentypen zur Laufzeit</emLink></text>
<text><emLink href="script/ScriptPlayers.html">Scriptspieler (z.B. KI-Spieler)</emLink></text>
</part>
</doc>
<author>Sven2</author><date>2002-04</date>
<author>matthes</author><date>2004-06</date>

</clonkDoc>
