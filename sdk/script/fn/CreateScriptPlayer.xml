<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="../../../clonk.xsl"?>
<clonkDoc xmlns="https://clonkspot.org"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="https://clonkspot.org ../../../clonk.xsd" xml:lang="de">
	<func isAsync="false">
		<title>CreateScriptPlayer</title>
		<category>Spieler</category>
		<versions><version>4.9.6.0 CR</version></versions>
		<syntax>
			<rtype isReference="false">bool</rtype>
			<params>
				<param isReference="false" isOptional="false"><type>string</type><name>szName</name><desc>Name für den Scriptspieler. Muss angegeben werden.</desc></param>
				<param isReference="false" isOptional="false"><type>int</type><name>dwClr</name><desc>Spielerfarbe</desc></param>
				<param isReference="false" isOptional="true"><type>int</type><name>idTeam</name><desc>Team-ID. Wird 0 angegeben, so wird ein Team nach denselben Regeln ausgewählt wie bei einem normal beitretenden Spieler.</desc></param>
				<param isReference="false" isOptional="true"><type>int</type><name>dwFlags</name>
					<desc>Bitmaske aus folgenden Werten:
						<table activateBitmask="false" bitmaskName="">
							<rowh><col>Bit</col><col>Konstante</col><col>Beschreibung</col></rowh>
							<row><col>0</col><col>CSPF_FixedAttributes</col><col>Wenn gesetzt, tritt der Spieler garantiert mit den in den Parameter angegebenen Namen und Farbe bei. Ansonsten werden die Attribute bei Kollisionen geändert.</col></row>
							<row><col>1</col><col>CSPF_NoScenarioInit</col><col>Wenn wahr, wird die Szenarieninitialisierung, also das Erzeugen von Heimatbasismaterial und Clonks, das Setzen der Baupläne nach Szenarienvorgaben, etc., nicht durchgeführt. Außerdem werden die globalen PreInitializePlayer- und InitializePlayer-Callbacks ans Szenarienscript und die Spielziel-, Regel- und Umweltobjekte nicht ausgeführt. Stattdessen wird ein InitializeScriptPlayer(Spielernummer, Team)-Callback als DefinitionCall (d.h. ohne <funcLink>this</funcLink>()-Objekt) auf der in idExtraData angegebenen Definition ausgeführt. Mit diesem Parameter lassen sich also spezialisierte Scriptspieler realisieren, die nicht gleichberechtigt mit menschlichen Spielern agieren.</col></row>
							<row><col>2</col><col>CSPF_NoEliminationCheck</col><col>Wenn gesetzt, wird der Spieler nicht automatisch eliminiert, wenn er keine Crew mehr hat.</col></row>
							<row><col>3</col><col>CSPF_Invisible</col><col>Wenn gesetzt, ist der Spieler nicht in Spielerlisten wie zum Beispiel in der Lobby und im Verfeindungsmenü sichtbar.</col></row>
						</table>
					</desc>
				</param>
				<param isReference="false" isOptional="true"><type>id</type><name>idExtraData</name><desc>ID, die durchgereicht und an den InitializePlayer-Aufruf weitergegeben wird. Durch Angabe einer ID lassen sich Scriptspieler-Typen unterscheiden. Beispielsweise könnte ein Szenario dynamisch Alien- oder Clonkgegner anbieten.</desc></param>
			</params>
		</syntax>
		<desc>Initiiert den Beitritt eines Scriptspielers. Scriptspieler berhalten sich von der Scriptseite wie reguläre Spieler. Sie haben eine Stammcrew, ein Konto, Baupläne, Heimatbasismaterial, Verfeindungen, Teams, etc. Für diese Spieler wird jedoch regulär kein Sichtfenster geöffnet und sie lassen sich nicht von menschlichen Spielern steuern.<br />Scriptspieler können zum Beispiel verwendet werden, um KI-Gegner wie z.B. Bots in Hazard zu realisieren.</desc>
		<remark>Scriptspieler treten in Netzwerkspielen genau wie reguläre Spieler verzögert bei. Das bedeutet, dass nach dem Aufruf von CreateScriptPlayer nicht sofort der Spieler zur Verfügung steht.<br />Wenn ein Script beispielsweise einen KI-Spieler ereugen will, so sollte die tatsächliche KI-Initialisierung erst im entsprechenden InitializePlayer-Callback erfolgen, wobei mit <funcLink>GetPlayerType</funcLink>() geprüft werden kann, ob es sich um einen Scriptspieler handelt.<br />Wird der Spieler schon zu Beginn des Szenarios gebraucht - also zum Beispiel als Gegner in einer Mission - so sollte stattdessen ein Spieler in den SavePlayerInfos.txt angelegt werden.</remark>
		<examples>
			<example>
				<text>Für Beispiele siehe <emLink href="script/ScriptPlayers.html">Scriptspieler</emLink>.</text>
			</example>
		</examples>
		<related>
			<emLink href="script/ScriptPlayers.html">Scriptspieler</emLink>
			<funcLink>GetPlayerType</funcLink>
		</related>
	</func>
	<author>Sven2</author><date>2007-12</date>
</clonkDoc>
