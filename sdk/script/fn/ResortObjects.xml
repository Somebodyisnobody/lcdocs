<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="../../../clonk.xsl"?>
<clonkDoc xmlns="https://clonkspot.org"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="https://clonkspot.org ../../../clonk.xsd" xml:lang="de">
	<func>
		<title>ResortObjects</title>
		<category>Objekte/Position</category>
		<versions><version>4.9.1.0 GWE</version></versions>
		<syntax>
			<rtype>bool</rtype>
			<params>
				<param><type>string</type><name>szResortFunc</name><desc>Name der Funktion, die für die Umsortierung aufgerufen wird.</desc></param>
				<param><type>int</type><name>iCategory</name><desc>Umzusortierende Objektkategorie (z.B. <funclink>C4D_StaticBack</funclink>). 0 sortiert alle Objekte neu.</desc><optional /></param>
			</params>
		</syntax>
		<desc>Sortiert die Objektliste teilweise oder komplett neu. Dafür wird ein einfacher Sortierungsalgorithmus angewandt, der immer wieder die angegebene Funktion aufruft, welche dann die Relation zweier Objekte zueinander zurückgeben muss. Die beiden Objekte werden als <funclink>Par</funclink>(0) und <funclink>Par</funclink>(1) übergeben. Wenn das erste Objekt vor dem zweiten stehen sollte, muss die Funktion einen Wert kleiner Null zurückgeben. Ansonsten einen Wert größer oder gleich Null.</desc>
		<remark>Die Sortierung findet intern erst am Ende des Frames statt.</remark>
		<examples>
			<example>

<code>  ResortObjects("ResortProc", <funclink>C4D_StaticBack</funclink>());

protected ResortProc: return(<funclink>GetMass</funclink>(<funclink>Par</funclink>(0))-<funclink>GetMass</funclink>(<funclink>Par</funclink>(1)));</code>
				<text>Sortiert alle C4D_StaticBack-Objekte nach Gewicht (leichte Objekte nach vorne).</text>
			</example>
		</examples>
		<related>
			<funclink>SetObjectOrder</funclink>
			<funclink>Resort</funclink>
		</related>
	</func>
	<author>Sven2</author><date>2001-11</date>
</clonkDoc>
